container:
  image: ubuntu:20.04
  cpu: 8
  memory: 16G

env:
  DEVICE: Infinix_X6512
  DEVICE_PATH: device/infinix/Infinix-X6512
  MANIFEST: https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git
  MANIFEST_BRANCH: twrp-11
  DT_REPO: https://github.com/manusia251/twrp-test
  DT_BRANCH: main
  USE_CCACHE: 1
  CCACHE_SIZE: 10G
  ALLOW_MISSING_DEPENDENCIES: true
  LC_ALL: C

task:
  name: TWRP Build - Infinix X6512
  timeout_in: 60m
  
  install_script: |
    echo "[1/7] Installing dependencies..."
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq > /dev/null 2>&1
    apt-get install -y -qq --no-install-recommends \
      bc bison build-essential ccache curl flex g++-multilib gcc-multilib \
      git gnupg gperf lib32ncurses5-dev lib32z1-dev liblz4-tool \
      libncurses5 libssl-dev libxml2 libxml2-utils lzop \
      python python3 rsync unzip zip openjdk-8-jdk-headless \
      ca-certificates wget file make openssh-client > /dev/null 2>&1
    wget -q https://storage.googleapis.com/git-repo-downloads/repo -O /usr/bin/repo
    chmod a+x /usr/bin/repo
    ccache -M $CCACHE_SIZE > /dev/null 2>&1
    git config --global user.email "ci@cirrus.com" > /dev/null 2>&1
    git config --global user.name "Cirrus CI" > /dev/null 2>&1
    echo "[1/7] Dependencies installed ✓"
  
  sync_script: |
    echo "[2/7] Syncing TWRP sources..."
    mkdir -p /tmp/twrp && cd /tmp/twrp
    repo init --depth=1 -u $MANIFEST -b $MANIFEST_BRANCH --no-repo-verify > /dev/null 2>&1
    repo sync -c -j$(nproc) --force-sync --no-clone-bundle --no-tags --optimized-fetch > /dev/null 2>&1
    echo "[2/7] Sources synced ✓"
  
  device_tree_script: |
    echo "[3/7] Setting up device tree..."
    cd /tmp/twrp
    
    # Clone and setup device tree
    git clone --depth=1 $DT_REPO -b $DT_BRANCH temp_dt > /dev/null 2>&1
    mkdir -p device/infinix
    cp -r temp_dt/Infinix-X6512 device/infinix/Infinix_X6512
    rm -rf temp_dt
    
    cd device/infinix/Infinix_X6512
    
    # Remove problematic lines
    sed -i '/PRODUCT_STATIC_BOOT_CONTROL_HAL/,+4d' device.mk 2>/dev/null || true
    rm -f vendorsetup.sh
    
    # Create proper twrp makefile
    cat > twrp_${DEVICE}.mk << 'EOF'
    $(call inherit-product, $(SRC_TARGET_DIR)/product/core_minimal.mk)
    $(call inherit-product-if-exists, vendor/twrp/config/common.mk)
    $(call inherit-product, device/infinix/Infinix_X6512/device.mk)
    
    PRODUCT_DEVICE := Infinix_X6512
    PRODUCT_NAME := twrp_Infinix_X6512
    PRODUCT_BRAND := Infinix
    PRODUCT_MODEL := Infinix X6512
    PRODUCT_MANUFACTURER := infinix
    EOF
    
    # Update AndroidProducts.mk
    cat > AndroidProducts.mk << 'EOF'
    PRODUCT_MAKEFILES := \
        $(LOCAL_DIR)/twrp_Infinix_X6512.mk
    
    COMMON_LUNCH_CHOICES := \
        twrp_Infinix_X6512-eng
    EOF
    
    # Update Android.mk
    cat > Android.mk << 'EOF'
    LOCAL_PATH := $(call my-dir)
    ifeq ($(TARGET_DEVICE),Infinix_X6512)
    include $(call all-subdir-makefiles,$(LOCAL_PATH))
    endif
    EOF
    
    # Add minimal patches
    cat >> BoardConfig.mk << 'EOF'
    
    TW_INCLUDE_FASTBOOTD := true
    TW_INCLUDE_CRYPTO := true
    TW_USE_NEW_MINADBD := true
    TARGET_USES_LOGD := true
    TW_NO_SCREEN_BLANK := true
    EOF
    
    # Touch init
    mkdir -p recovery/root
    cat > recovery/root/init.recovery.touch.rc << 'EOF'
    on boot
        write /sys/bus/spi/drivers/omnivision_tcm_spi/bind "spi2.0"
        chmod 0660 /dev/input/event*
        setprop ro.adb.secure 0
    EOF
    
    echo "PRODUCT_COPY_FILES += \$(LOCAL_PATH)/recovery/root/init.recovery.touch.rc:root/init.recovery.touch.rc" >> device.mk
    
    # Fix paths - rename folder to match PRODUCT_DEVICE
    cd /tmp/twrp/device/infinix
    if [ -d "Infinix-X6512" ] && [ ! -d "Infinix_X6512" ]; then
      mv Infinix-X6512 Infinix_X6512
    fi
    
    echo "[3/7] Device tree ready ✓"
  
  validate_script: |
    echo "[4/7] Validating files..."
    cd /tmp/twrp/device/infinix/Infinix_X6512
    
    error=0
    for file in Android.mk AndroidProducts.mk BoardConfig.mk device.mk twrp_${DEVICE}.mk recovery.fstab; do
      if [ ! -f "$file" ]; then
        echo "  ERROR: Missing $file"
        error=1
      fi
    done
    
    if [ ! -f "prebuilt/kernel" ]; then
      echo "  ERROR: Missing prebuilt/kernel"
      error=1
    fi
    
    if [ $error -eq 1 ]; then
      echo "[4/7] Validation failed ✗"
      exit 1
    fi
    
    echo "[4/7] Files validated ✓"
  
  build_script: |
    echo "[5/7] Building TWRP..."
    cd /tmp/twrp
    
    # Silence most output
    source build/envsetup.sh > /dev/null 2>&1
    
    # Direct lunch without menu
    export TARGET_PRODUCT=twrp_${DEVICE}
    export TARGET_BUILD_VARIANT=eng
    export TARGET_BUILD_TYPE=release
    export TARGET_BUILD_APPS=
    
    # Try lunch with number 5 (from menu)
    echo "5" | lunch > /dev/null 2>&1
    
    # If that fails, try direct lunch
    if [ -z "$TARGET_DEVICE" ]; then
      lunch twrp_${DEVICE}-eng > /dev/null 2>&1 || true
    fi
    
    echo "  Target: $TARGET_PRODUCT-$TARGET_BUILD_VARIANT"
    echo "  Building recovery..."
    
    # Build with minimal output
    make -j$(nproc) recoveryimage 2>&1 | grep -E "^(```math
|####|build|target|Install:|Copying:|Output:)" || true
    
    # Check if build succeeded
    if [ -f out/target/product/${DEVICE}/boot.img ] || [ -f out/target/product/Infinix_X6512/boot.img ]; then
      echo "[5/7] Build successful ✓"
    else
      echo "[5/7] Build failed ✗"
      # Show last errors
      tail -n 20 out/build-${DEVICE}.ninja.log 2>/dev/null || true
      exit 1
    fi
  
  verify_script: |
    echo "[6/7] Verifying output..."
    cd /tmp/twrp
    
    # Find output image
    OUTPUT=""
    for path in out/target/product/${DEVICE}/boot.img out/target/product/Infinix_X6512/boot.img out/target/product/${DEVICE}/recovery.img; do
      if [ -f "$path" ]; then
        OUTPUT="$path"
        break
      fi
    done
    
    if [ -z "$OUTPUT" ]; then
      echo "[6/7] No output found ✗"
      ls -la out/target/product/ 2>/dev/null || true
      exit 1
    fi
    
    SIZE=$(stat -c%s "$OUTPUT" | numfmt --to=iec)
    MD5=$(md5sum "$OUTPUT" | cut -d' ' -f1)
    
    echo "  Output: $(basename $OUTPUT)"
    echo "  Size: $SIZE"
    echo "  MD5: $MD5"
    echo "[6/7] Output verified ✓"
    
    echo "$OUTPUT" > /tmp/output_path
  
  artifacts_script: |
    echo "[7/7] Preparing artifacts..."
    
    OUTPUT=$(cat /tmp/output_path)
    if [ -f "$OUTPUT" ]; then
      mkdir -p /tmp/artifacts
      DATE=$(date +%Y%m%d-%H%M)
      cp "$OUTPUT" /tmp/artifacts/twrp-${DEVICE}-${DATE}.img
      
      cat > /tmp/artifacts/README.txt << EOF
    TWRP for Infinix X6512
    Date: $(date)
    MD5: $(md5sum "$OUTPUT" | cut -d' ' -f1)
    
    Flash: fastboot flash boot twrp-${DEVICE}-${DATE}.img
    EOF
      
      echo "[7/7] Artifacts ready ✓"
      echo ""
      echo "Build completed successfully!"
    else
      echo "[7/7] No artifacts ✗"
      exit 1
    fi
  
  artifacts:
    path: "/tmp/artifacts/*"
