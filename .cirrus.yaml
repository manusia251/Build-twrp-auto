container:
  image: ubuntu:20.04
  cpu: 8
  memory: 16G

env:
  # Device config
  DEVICE: Infinix-X6512
  DEVICE_PATH: device/infinix/Infinix-X6512
  
  # TWRP Minimal Manifest
  MANIFEST: https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git
  MANIFEST_BRANCH: twrp-11
  
  # Your device tree
  DT_REPO: https://github.com/manusia251/twrp-test
  DT_BRANCH: main
  
  # Build optimization
  USE_CCACHE: 1
  CCACHE_SIZE: 10G
  ALLOW_MISSING_DEPENDENCIES: true
  LC_ALL: C

task:
  name: TWRP Build - Infinix X6512
  timeout_in: 60m
  
  install_script: |
    echo "=== Installing minimal dependencies ==="
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq
    apt-get install -y -qq --no-install-recommends \
      bc bison build-essential ccache curl flex g++-multilib gcc-multilib \
      git gnupg gperf lib32ncurses5-dev lib32z1-dev liblz4-tool \
      libncurses5 libssl-dev libxml2 libxml2-utils lzop \
      python python3 rsync unzip zip openjdk-8-jdk-headless \
      ca-certificates wget file make openssh-client
    wget -q https://storage.googleapis.com/git-repo-downloads/repo -O /usr/bin/repo
    chmod a+x /usr/bin/repo
    ccache -M $CCACHE_SIZE
    git config --global user.email "ci@cirrus.com"
    git config --global user.name "Cirrus CI"
    echo "=== Dependencies installed ==="
  
  sync_script: |
    echo "=== Syncing minimal TWRP sources ==="
    mkdir -p /tmp/twrp && cd /tmp/twrp
    repo init --depth=1 -u $MANIFEST -b $MANIFEST_BRANCH --no-repo-verify
    repo sync -c -j$(nproc) --force-sync --no-clone-bundle --no-tags --optimized-fetch
    echo "=== Sync completed ==="
  
  device_tree_script: |
    echo "=== Setting up device tree ==="
    cd /tmp/twrp
    
    # Clone the repo
    git clone --depth=1 $DT_REPO -b $DT_BRANCH temp_dt
    
    # Copy the device tree to proper location
    mkdir -p device/infinix
    cp -r temp_dt/Infinix-X6512 device/infinix/
    rm -rf temp_dt
    
    # Navigate to device tree
    cd $DEVICE_PATH
    
    echo "=== Fixing AndroidProducts.mk ==="
    # Fix the AndroidProducts.mk - remove the -X6512 variant part
    cat > AndroidProducts.mk << 'PRODUCTS_EOF'
    PRODUCT_MAKEFILES := \
        $(LOCAL_DIR)/omni_Infinix-X6512.mk
    
    COMMON_LUNCH_CHOICES := \
        omni_Infinix-X6512-user \
        omni_Infinix-X6512-userdebug \
        omni_Infinix-X6512-eng
    PRODUCTS_EOF
    
    echo "=== Fixing Android.mk ==="
    # Also fix Android.mk
    cat > Android.mk << 'ANDROID_MK_EOF'
    LOCAL_PATH := $(call my-dir)
    
    ifeq ($(TARGET_DEVICE),Infinix-X6512)
    include $(call all-subdir-makefiles,$(LOCAL_PATH))
    endif
    ANDROID_MK_EOF
    
    echo "=== Checking files ==="
    ls -la
    
    echo "=== Verifying required files ==="
    for file in Android.mk AndroidProducts.mk BoardConfig.mk device.mk omni_${DEVICE}.mk recovery.fstab; do
      if [ -f "$file" ]; then
        echo "✓ $file"
      else
        echo "✗ Missing $file"
        exit 1
      fi
    done
    
    if [ -f "prebuilt/kernel" ]; then
      echo "✓ Kernel found"
    else
      echo "✗ Missing kernel"
      exit 1
    fi
    
    if [ -f "prebuilt/dtb.img" ]; then
      echo "✓ DTB found"
    else
      echo "✗ Missing DTB"
      exit 1
    fi
    
    echo "=== Adding patches to BoardConfig.mk ==="
    cat >> BoardConfig.mk << 'PATCH_EOF'
    
    # CI Optimizations
    TW_INCLUDE_FASTBOOTD := true
    TW_INCLUDE_RESETPROP := true
    TW_INCLUDE_CRYPTO := true
    TW_INCLUDE_CRYPTO_FBE := true
    TW_INCLUDE_FBE_METADATA_DECRYPT := true
    BOARD_USES_METADATA_PARTITION := true
    TW_USE_NEW_MINADBD := true
    TARGET_USES_LOGD := true
    TWRP_INCLUDE_LOGCAT := true
    TW_NO_SCREEN_BLANK := true
    TW_DEFAULT_BRIGHTNESS := 120
    PATCH_EOF
    
    echo "=== Creating touch init script ==="
    mkdir -p recovery/root
    cat > recovery/root/init.recovery.touch.rc << 'TOUCH_EOF'
    on boot
        write /sys/bus/spi/drivers/omnivision_tcm_spi/bind "spi2.0"
        chmod 0660 /dev/input/event0
        chmod 0660 /dev/input/event1
        chmod 0660 /dev/input/event2
        write /sys/class/omnivision_tcm/tcm0/enable 1
        setprop ro.adb.secure 0
        setprop service.adb.root 1
    TOUCH_EOF
    
    echo "" >> device.mk
    echo "PRODUCT_COPY_FILES += \$(LOCAL_PATH)/recovery/root/init.recovery.touch.rc:root/init.recovery.touch.rc" >> device.mk
    
    echo "=== Device tree ready ==="
  
  build_script: |
    echo "=== Building TWRP ==="
    cd /tmp/twrp
    source build/envsetup.sh
    
    echo "=== Available lunch choices: ==="
    lunch
    
    echo "=== Selecting lunch target ==="
    lunch omni_Infinix-X6512-eng
    
    echo "=== Starting build ==="
    make -j$(nproc) recoveryimage
    
    echo "=== Checking output ==="
    if [ -f out/target/product/Infinix-X6512/boot.img ]; then
      echo "✓ boot.img found"
      ls -lh out/target/product/Infinix-X6512/boot.img
      md5sum out/target/product/Infinix-X6512/boot.img
    elif [ -f out/target/product/Infinix-X6512/recovery.img ]; then
      echo "✓ recovery.img found"
      ls -lh out/target/product/Infinix-X6512/recovery.img
      md5sum out/target/product/Infinix-X6512/recovery.img
    else
      echo "✗ No output image found"
      ls -la out/target/product/Infinix-X6512/
      exit 1
    fi
  
  prepare_artifacts_script: |
    echo "=== Preparing artifacts ==="
    cd /tmp/twrp
    mkdir -p /tmp/artifacts
    
    if [ -f out/target/product/Infinix-X6512/boot.img ]; then
      DATE=$(date +%Y%m%d-%H%M)
      cp out/target/product/Infinix-X6512/boot.img /tmp/artifacts/twrp-X6512-${DATE}.img
      
      cat > /tmp/artifacts/README.txt << 'INFO_EOF'
    TWRP for Infinix X6512
    ======================
    Build Date: $(date)
    
    How to flash:
    1. adb reboot bootloader
    2. fastboot flash boot twrp-X6512-*.img
    3. fastboot reboot recovery
    
    Features:
    - Touchscreen support (Omnivision TCM SPI)
    - ADB Root enabled
    - Fastbootd support
    - Magisk support
    - FBE Decryption support
    INFO_EOF
      
      echo "=== Artifacts ready ==="
      ls -la /tmp/artifacts/
    elif [ -f out/target/product/Infinix-X6512/recovery.img ]; then
      DATE=$(date +%Y%m%d-%H%M)
      cp out/target/product/Infinix-X6512/recovery.img /tmp/artifacts/twrp-X6512-${DATE}-recovery.img
      echo "Using recovery.img"
      ls -la /tmp/artifacts/
    fi
  
  artifacts:
    path: "/tmp/artifacts/*"
