#!/bin/bash
#
# Skrip Build TWRP - VERSI OTOMATIS FINAL (Fixed for TWRP + Skip VTS)
# =================================================================

set -e

# Parse args dari .cirrus (DEVICE_TREE DEVICE_BRANCH DEVICE_CODENAME MANIFEST_BRANCH TARGET_RECOVERY_IMAGE)
DEVICE_TREE_URL="$1"
DEVICE_TREE_BRANCH="$2"
DEVICE_CODENAME="$3"
MANIFEST_BRANCH="$4"
BUILD_TARGET="$5"  # e.g., boot

# Defaults jika kosong
MANIFEST_BRANCH="${MANIFEST_BRANCH:-twrp-11}"
DEVICE_TREE_URL="${DEVICE_TREE_URL:-https://github.com/manusia251/twrp-test.git}"
DEVICE_TREE_BRANCH="${DEVICE_TREE_BRANCH:-main}"
DEVICE_CODENAME="${DEVICE_CODENAME:-X6512}"
BUILD_TARGET="${BUILD_TARGET:-boot}"
VENDOR_NAME="infinix"

echo "========================================"
echo "Memulai Build TWRP"
echo "----------------------------------------"
echo "Manifest Branch   : ${MANIFEST_BRANCH}"
echo "Device Tree URL   : ${DEVICE_TREE_URL}"
echo "Device Branch     : ${DEVICE_TREE_BRANCH}"
echo "Device Codename   : ${DEVICE_CODENAME}"
echo "Build Target      : ${BUILD_TARGET}image"
echo "========================================"

# Variabel tambahan
WORKDIR=$(pwd)
export GITHUB_WORKSPACE=$WORKDIR

# --- 2. Persiapan Lingkungan Build ---
echo "--- Berada di direktori $(pwd) ---"
echo "--- Membuat dan masuk ke direktori twrp... ---"
cd ..
mkdir -p "$WORKDIR/twrp"
cd "$WORKDIR/twrp"
echo "--- Direktori saat ini: $(pwd) ---"

git config --global user.name "manusia251"
git config --global user.email "darkside@gmail.com"

# --- 3. Inisialisasi dan Konfigurasi Repo ---
echo "--- Langkah 1: Inisialisasi manifest TWRP... ---"
repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git -b ${MANIFEST_BRANCH}

echo "--- Langkah 2: Membuat local manifest untuk device tree... ---"
mkdir -p .repo/local_manifests
cat > .repo/local_manifests/twrp_device_tree.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
    <project name="${DEVICE_TREE_URL#https://github.com/}" path="device/${VENDOR_NAME}/${DEVICE_CODENAME}" remote="github" revision="${DEVICE_TREE_BRANCH}" />
</manifest>
EOF

echo "--- Langkah 3: Memulai sinkronisasi repositori. Mohon tunggu... ---"
repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
echo "--- Sinkronisasi selesai. ---"

# --- Patch Skip VTS - IMPROVED VERSION ---
echo "--- Applying VTS patches... ---"

# Patch 1: Comment out include Android.host_config.mk di frameworks/base/core/xsd/vts/Android.mk
if [ -f "frameworks/base/core/xsd/vts/Android.mk" ]; then
    echo "--- Patching frameworks/base/core/xsd/vts/Android.mk ---"
    sed -i 's|include $(TOP)/test/vts/tools/build/Android.host_config.mk|# &|' frameworks/base/core/xsd/vts/Android.mk
    echo "--- VTS patch applied: Android.host_config.mk include commented out ---"
fi

# Patch 2: Comment out seluruh blok VTS di frameworks/base/Android.mk jika ada
if [ -f "frameworks/base/Android.mk" ]; then
    echo "--- Checking frameworks/base/Android.mk for VTS references ---"
    if grep -q "core/xsd/vts" frameworks/base/Android.mk; then
        sed -i 's|include $(LOCAL_PATH)/core/xsd/vts/Android.mk|# &|' frameworks/base/Android.mk
        echo "--- VTS include in frameworks/base/Android.mk commented out ---"
    fi
fi

# Patch 3: Buat dummy file jika masih diperlukan
if [ ! -f "test/vts/tools/build/Android.host_config.mk" ]; then
    echo "--- Creating dummy VTS config file ---"
    mkdir -p test/vts/tools/build
    cat > test/vts/tools/build/Android.host_config.mk << 'DUMMY_EOF'
# Dummy VTS config file - auto-generated by build script
# This file is created to prevent build errors when VTS is not available

# Empty VTS configuration - all VTS related builds are disabled
DUMMY_EOF
    echo "--- Dummy VTS config file created ---"
fi

# Patch 4: Skip VTS tests dengan environment variable
export SKIP_VTS_BUILD=true
export DISABLE_VTS_BUILD=true

# --- 4. Verifikasi Device Tree ---
echo "--- Langkah 4: Memeriksa keberadaan device tree... ---"
if [ -d "device/${VENDOR_NAME}/${DEVICE_CODENAME}" ] && [ -f "device/${VENDOR_NAME}/${DEVICE_CODENAME}/AndroidProducts.mk" ] && [ -f "device/${VENDOR_NAME}/${DEVICE_CODENAME}/vendorsetup.sh" ]; then
    echo "--- Device tree ditemukan dan lengkap. Lokasi: device/${VENDOR_NAME}/${DEVICE_CODENAME} ---"
else
    echo "--- ERROR: Device tree TIDAK DITEMUKAN atau file kunci hilang (AndroidProducts.mk/vendorsetup.sh). Cek repo. ---"
    exit 1
fi

# --- 4.1. Kernel Check and Fix ---
echo "--- Langkah 4.1: Memeriksa dan memperbaiki masalah kernel... ---"
DEVICE_PATH="device/${VENDOR_NAME}/${DEVICE_CODENAME}"

# Debug: Cek apakah device tree yang di-clone benar
echo "--- Debug: Mengecek struktur device tree ---"
ls -la "$DEVICE_PATH/"
echo "--- Mengecek apakah ada direktori prebuilt ---"
if [ -d "$DEVICE_PATH/prebuilt" ]; then
    echo "--- Direktori prebuilt ditemukan, isi: ---"
    ls -la "$DEVICE_PATH/prebuilt/"
else
    echo "--- Direktori prebuilt TIDAK ditemukan ---"
fi

# Cek apakah nama direktori device tree case-sensitive berbeda
echo "--- Mengecek kemungkinan nama direktori berbeda ---"
ls -la device/${VENDOR_NAME}/

# Cek struktur direktori device tree
echo "--- Struktur device tree: ---"
find "$DEVICE_PATH" -type f -name "*kernel*" -o -name "*Image*" -o -name "*zImage*" 2>/dev/null || echo "Tidak ada file kernel ditemukan"

# PERBAIKAN: Cek path yang sebenarnya digunakan oleh build system
echo "--- Mengecek path yang digunakan build system ---"
ACTUAL_DEVICE_PATH=""
if [ -d "device/${VENDOR_NAME}/${DEVICE_CODENAME}" ]; then
    ACTUAL_DEVICE_PATH="device/${VENDOR_NAME}/${DEVICE_CODENAME}"
elif [ -d "device/${VENDOR_NAME}/Infinix-${DEVICE_CODENAME}" ]; then
    ACTUAL_DEVICE_PATH="device/${VENDOR_NAME}/Infinix-${DEVICE_CODENAME}"
    echo "--- Device path menggunakan prefix Infinix: $ACTUAL_DEVICE_PATH ---"
elif [ -d "device/Infinix/${DEVICE_CODENAME}" ]; then
    ACTUAL_DEVICE_PATH="device/Infinix/${DEVICE_CODENAME}"
    echo "--- Device path menggunakan vendor Infinix (kapital): $ACTUAL_DEVICE_PATH ---"
else
    echo "--- Mencari device tree dengan pattern lain ---"
    find device/ -name "*${DEVICE_CODENAME}*" -type d
fi

if [ -n "$ACTUAL_DEVICE_PATH" ]; then
    DEVICE_PATH="$ACTUAL_DEVICE_PATH"
    echo "--- Menggunakan device path: $DEVICE_PATH ---"
fi

# Jika sudah ada kernel di tempat yang benar, tidak perlu lakukan apa-apa
if [ -f "$DEVICE_PATH/prebuilt/kernel" ]; then
    echo "--- Kernel sudah ada di lokasi yang benar: $DEVICE_PATH/prebuilt/kernel ---"
    KERNEL_FOUND=true
else
    echo "--- Kernel tidak ditemukan di lokasi yang diharapkan ---"
    KERNEL_FOUND=false
fi

# Jika kernel tidak ditemukan, cek di BoardConfig
if [ "$KERNEL_FOUND" = false ]; then
    echo "--- Kernel prebuilt tidak ditemukan. Mengecek BoardConfig... ---"
    
    BOARDCONFIG_FILES=(
        "$DEVICE_PATH/BoardConfig.mk"
        "$DEVICE_PATH/BoardConfigCommon.mk"
    )
    
    for boardconfig in "${BOARDCONFIG_FILES[@]}"; do
        if [ -f "$boardconfig" ]; then
            echo "--- Mengecek $boardconfig ---"
            
            # Cek apakah ada TARGET_PREBUILT_KERNEL yang di-comment
            if grep -q "^#.*TARGET_PREBUILT_KERNEL" "$boardconfig"; then
                echo "--- Ditemukan TARGET_PREBUILT_KERNEL yang di-comment, mengaktifkan... ---"
                sed -i 's/^#\s*\(TARGET_PREBUILT_KERNEL\)/\1/' "$boardconfig"
            fi
            
            # Cek apakah menggunakan kernel source instead of prebuilt
            if grep -q "TARGET_KERNEL_SOURCE" "$boardconfig"; then
                echo "--- Device menggunakan kernel source, bukan prebuilt ---"
                echo "--- Menambahkan fallback ke prebuilt kernel ---"
                
                # Tambahkan fallback prebuilt kernel config
                cat >> "$boardconfig" << 'KERNEL_FALLBACK'

# Fallback to prebuilt kernel if source build fails
ifeq ($(wildcard $(TARGET_KERNEL_SOURCE)),)
    TARGET_PREBUILT_KERNEL := $(DEVICE_PATH)/prebuilt/kernel
endif
KERNEL_FALLBACK
            fi
            
            # Extract kernel dari boot.img jika ada
            if [ -f "$DEVICE_PATH/prebuilt/boot.img" ]; then
                echo "--- Ditemukan boot.img, mengekstrak kernel... ---"
                if command -v unpackbootimg >/dev/null 2>&1; then
                    cd "$DEVICE_PATH/prebuilt"
                    unpackbootimg -i boot.img
                    if [ -f "boot.img-kernel" ]; then
                        cp boot.img-kernel kernel
                        echo "--- Kernel berhasil diekstrak dari boot.img ---"
                        KERNEL_FOUND=true
                    fi
                    cd - >/dev/null
                elif command -v python3 >/dev/null 2>&1; then
                    echo "--- Menggunakan script Python untuk ekstrak kernel... ---"
                    python3 -c "
import struct
import sys
import os

def extract_kernel_from_boot(boot_img_path, output_path):
    with open(boot_img_path, 'rb') as f:
        # Skip Android boot header (2048 bytes)
        f.seek(2048)
        kernel_data = f.read(8 * 1024 * 1024)  # Read max 8MB
        
        # Find kernel end (look for gzip magic or padding)
        kernel_end = len(kernel_data)
        for i in range(len(kernel_data) - 4):
            if kernel_data[i:i+4] == b'\x00\x00\x00\x00':
                if all(b == 0 for b in kernel_data[i:i+100]):
                    kernel_end = i
                    break
        
        with open(output_path, 'wb') as out:
            out.write(kernel_data[:kernel_end])

if __name__ == '__main__':
    extract_kernel_from_boot('$DEVICE_PATH/prebuilt/boot.img', '$DEVICE_PATH/prebuilt/kernel')
    print('Kernel extracted successfully')
" && echo "--- Kernel berhasil diekstrak ---" && KERNEL_FOUND=true
                fi
            fi
        fi
    done
fi

# Jika masih belum ketemu, buat dummy kernel
if [ "$KERNEL_FOUND" = false ]; then
    echo "--- PERINGATAN: Kernel tidak ditemukan. Membuat dummy kernel untuk testing... ---"
    mkdir -p "$DEVICE_PATH/prebuilt"
    
    # Buat dummy kernel file (hanya untuk testing, tidak akan boot)
    dd if=/dev/zero of="$DEVICE_PATH/prebuilt/kernel" bs=1024 count=4096 2>/dev/null
    echo "--- Dummy kernel dibuat. PERHATIAN: Ini hanya untuk testing build! ---"
    
    # Tambahkan komentar di BoardConfig
    BOARDCONFIG="$DEVICE_PATH/BoardConfig.mk"
    if [ -f "$BOARDCONFIG" ]; then
        echo "# WARNING: Using dummy kernel - replace with actual kernel for working recovery" >> "$BOARDCONFIG"
        echo "TARGET_PREBUILT_KERNEL := \$(DEVICE_PATH)/prebuilt/kernel" >> "$BOARDCONFIG"
    fi
fi

echo "--- Kernel check selesai ---"

# --- 5. Proses Kompilasi ---
echo "--- Langkah 5: Memulai proses kompilasi... ---"
source build/envsetup.sh
export ALLOW_MISSING_DEPENDENCIES=true
export OF_PATH=${PWD}  # Legacy, tapi OK untuk TWRP
export RECOVERY_VARIANT=twrp

# Additional build environment variables to skip problematic components
export BOARD_HAVE_BLUETOOTH=false
export TARGET_SKIP_VTS_BUILD=true

echo "--- Menjalankan lunch... ---"
lunch omni_${DEVICE_CODENAME}-eng  # Kunci: omni_, bukan twrp_
echo "--- Menjalankan make... ---"
mka ${BUILD_TARGET}image  # e.g., bootimage

# --- 6. Persiapan Hasil Build ---
echo "--- Langkah 6: Menyiapkan hasil build... ---"
RESULT_DIR="$WORKDIR/twrp/out/target/product/${DEVICE_CODENAME}"
OUTPUT_DIR="$WORKDIR/output"
mkdir -p "$OUTPUT_DIR"

if [ -f "$RESULT_DIR/boot.img" ] || [ -f "$RESULT_DIR/${BUILD_TARGET}.img" ] || [ -f "$RESULT_DIR/recovery.img" ]; then
    echo "--- File output TWRP ditemukan! Menyalin ke direktori output... ---"
    cp -f "$RESULT_DIR/boot.img" "$OUTPUT_DIR/" 2>/dev/null || true
    cp -f "$RESULT_DIR/${BUILD_TARGET}.img" "$OUTPUT_DIR/" 2>/dev/null || true
    cp -f "$RESULT_DIR/recovery.img" "$OUTPUT_DIR/" 2>/dev/null || true
else
    echo "--- Peringatan: File output build tidak ditemukan di ${RESULT_DIR}. Cek log. ---"
    exit 1
fi

# --- 7. Selesai ---
echo "--- Build selesai! Cek folder output. ---"
ls -lh "$OUTPUT_DIR"
echo "========================================"
